// <auto-generated />
using MapApplication.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MapApplication.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240817161629_AddAllTables")]
    partial class AddAllTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MapApplication.Data.FeatureDb", b =>
                {
                    b.Property<int>("FeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FeatureId"));

                    b.Property<string>("FeatureData")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("featureData");

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("featureName");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<string>("createdDate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("createdDate");

                    b.HasKey("FeatureId");

                    b.HasIndex("OwnerId");

                    b.ToTable("features", (string)null);
                });

            modelBuilder.Entity("MapApplication.Data.PointDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("owner_id");

                    b.Property<double>("X_coordinate")
                        .HasColumnType("double precision")
                        .HasColumnName("x_coordinate");

                    b.Property<double>("Y_coordinate")
                        .HasColumnType("double precision")
                        .HasColumnName("y_coordinate");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("points", (string)null);
                });

            modelBuilder.Entity("MapApplication.Data.TabsDb", b =>
                {
                    b.Property<int>("TabId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TabId"));

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("OwnerId");

                    b.Property<string>("TabColor")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tabColor");

                    b.Property<string>("TabName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tabName");

                    b.Property<string>("createdDate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("createdDate");

                    b.HasKey("TabId");

                    b.HasIndex("OwnerId");

                    b.ToTable("tabs", (string)null);
                });

            modelBuilder.Entity("MapApplication.Data.UsersDb", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("userEmail");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("userName");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("userPassword");

                    b.Property<string>("createdDate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("createdDate");

                    b.HasKey("UserId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("MapApplication.Data.WktDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Color");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("OwnerId");

                    b.Property<string>("PhotoLocation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PhotoLocation");

                    b.Property<string>("WKT")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("WKT");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Wkt", (string)null);
                });

            modelBuilder.Entity("MapApplication.Data.FeatureDb", b =>
                {
                    b.HasOne("MapApplication.Data.PointDb", null)
                        .WithMany("Features")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MapApplication.Data.WktDb", null)
                        .WithMany("Features")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MapApplication.Data.PointDb", b =>
                {
                    b.HasOne("MapApplication.Data.UsersDb", null)
                        .WithMany("UserPoints")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MapApplication.Data.TabsDb", b =>
                {
                    b.HasOne("MapApplication.Data.UsersDb", null)
                        .WithMany("UserTabs")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MapApplication.Data.WktDb", b =>
                {
                    b.HasOne("MapApplication.Data.UsersDb", null)
                        .WithMany("UserShapes")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MapApplication.Data.PointDb", b =>
                {
                    b.Navigation("Features");
                });

            modelBuilder.Entity("MapApplication.Data.UsersDb", b =>
                {
                    b.Navigation("UserPoints");

                    b.Navigation("UserShapes");

                    b.Navigation("UserTabs");
                });

            modelBuilder.Entity("MapApplication.Data.WktDb", b =>
                {
                    b.Navigation("Features");
                });
#pragma warning restore 612, 618
        }
    }
}
